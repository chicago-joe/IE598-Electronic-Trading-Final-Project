# -*- coding: utf-8 -*-
"""
Created on Wed Apr 06 15:29:18 2016

@author: IBridgePy@gmail.com
"""

from BasicPyLib.MarketCalendarWrapper import MarketCalendarWrapper
from IBridgePy.MarketManagerBase import MarketManager
import os
from sys import exit
import time
from IBridgePy.constants import BrokerName, UserConfig, MarketName, LogLevel, DataProviderName
from IBridgePy.TraderExtendedResources import Trader
from IBridgePy.quantopian import calendars, date_rules, time_rules

# userConfigure is the core input to Trader and MarketManager
# The default is UserConfig.REGULAR
try:
    id(runMode)
    userConfigure = UserConfig().get(runMode)
except:
    userConfigure = UserConfig.REGULAR

# Set rootFolderPath
userConfigure.rootFolderPath = os.getcwd()

# Read in the content of fileName
# The content is the definition of two basic functions, initialize and handle_data
# The values defined in RUN_ME.py will be override by the same value defined in the fileName
try:
    id(fileName)
    userConfigure.fileName = fileName
except:
    print (__name__+':EXIT, fileName is empty')
    exit()

if r'\\' in fileName or r'/' in fileName:
    with open(fileName) as f:
        script = f.read()
    exec(script)
else:
    with open(os.path.join(userConfigure.rootFolderPath, 'Strategies', fileName)) as f:
        script = f.read()
    exec(script)

try:
    id(accountCode)
    userConfigure.accountCode = accountCode
except:
    print (__name__+':EXIT, accountCode is empty')
    exit()

# Check if any manual input from RUN_ME.com
try:
    id(brokerName)
    userConfigure.brokerName = BrokerName().get(brokerName)
except:
    pass

try:
    id(dataProviderName)
    userConfigure.dataProviderName = DataProviderName().get(dataProviderName)
except:
    pass

try:
    id(repBarFreq)
    userConfigure.repBarFreq = repBarFreq
except:
    pass

try:
    id(showTimeZone)
    userConfigure.showTimeZoneName = showTimeZone
except:
    pass

try:
    id(marketName)
    userConfigure.marketName = MarketName().get(marketName)
except:
    pass

try:
    id(logLevel)
    userConfigure.logLevel = LogLevel().get(logLevel)
except:
    pass

try:
    id(clientId)
    userConfigure.clientId = clientId
except:
    pass

try:
    id(runScheduledFunctionBeforeHandleData)
    userConfigure.runScheduledFunctionBeforeHandleData = runScheduledFunctionBeforeHandleData
except:
    pass

try:
    id(host)
    userConfigure.host = host
except:
    pass

try:
    id(port)
    userConfigure.port = port
except:
    pass

# If any previous session is detected, get disconnected first
# This feature is designed for Sypder users.
try:
    id(trader)
    time.sleep(1)
    trader.brokerService.disconnect()
    time.sleep(1)
except:
    time.sleep(1)

# Three basic functions are required: initialize, handle_data and before_trading_start
# However, only initialize is required, input from RUN_ME.py, implemented by reading in fileName and exec script
# handle_data and before_trading_start are not required. It needs to detect if user input them
try:
    id(before_trading_start)
except:
    before_trading_start = None

try:
    id(handle_data)
except:
    handle_data = None

userConfigure.initialize_quantopian=initialize
userConfigure.handle_data_quantopian=handle_data
userConfigure.before_trading_start_quantopian=before_trading_start

userConfigure.build()
trader = Trader(userConfigure)

with open('define_functions.txt') as f:
    script = f.read()
exec(script)

c = MarketManager(trader, userConfigure)
c.run()
